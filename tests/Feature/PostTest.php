<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Http\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
use Tests\TestCase;

class PostTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user         = User::factory()->create();
        $this->otherUser =  User::factory()->create();
    }

    /**
     * A basic feature test.
     */
    public function test_can_create_user_with_posts(): void
    {
        $this->user->posts()->createMany([
            [
                'user_id' => $this->user->id,
                'title' => 'Martin is an engineer',
                'body' => 'Martin works at Abbott company',
            ], [
                'user_id' => $this->user->id,
                'title' => 'Lynn is a lawyer',
                'body' => 'Lynn works at Kub company',
            ],
        ]);

        $this->assertTrue(true);
        $this->assertCount(2, $this->user->posts);
    }

    public function test_can_create_a_post(): void
    {
        $request = [
            'title' => $this->faker->sentence(7),
            'body' => $this->faker->sentence(50),
        ];

        $response =$this->actingAs($this->user)
            ->post("/posts", $request);

        $response->assertSessionDoesntHaveErrors();
        $response->assertStatus(Response::HTTP_FOUND);
        $this->assertDatabaseHas('posts', $request);
    }

    public function test_can_update_a_post() :void
    {
        $post = $this->user->posts()->create([
            'title' => $this->faker->sentence(7),
        ]);
        $this->assertDatabaseHas('posts', ['id' => $post->id, 'user_id' => $this->user->id]);

        $request = [
            'title' => 'test comment updated',
        ];
        $response = $this->actingAs($this->user)
            ->put("/posts/{$post->id}", $request);

        $response->assertSessionDoesntHaveErrors();
        $this->assertDatabaseHas('posts', ['id' => $post->id, 'title' => 'test comment updated']);
    }

    public function test_can_delete_a_post() :void
    {
        $data = [
            'title' => $this->faker->sentence(7),
        ];

        $post = $this->user->posts()->create($data);
        $this->assertDatabaseHas('posts', ['id' => $post->id, 'user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)
            ->delete("/posts/{$post->id}");

        $response->assertSessionDoesntHaveErrors();
        $this->assertSoftDeleted('posts', ['id' => $post->id] );
    }

    public function test_can_other_user_update_a_post_that_doesnt_belong_to_it() :void
    {
        $post = $this->user->posts()->create([
            'title' => $this->faker->sentence(7),
        ]);
        $this->assertTrue(true);

        $request = [
            'title' => 'test post updated',
        ];

        // If they are not authorized, it will return a 403 Forbidden response.
        $response = $this->actingAs($this->otherUser)
            ->put("/posts/{$post->id}", $request);

        $response->assertStatus(Response::HTTP_FORBIDDEN);
    }
}
