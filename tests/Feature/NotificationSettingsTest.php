<?php

namespace Tests\Feature;

use App\Models\NotificationSettings;
use App\Models\NotificationTypes;
use App\Models\User;
use Database\Seeders\NotificationTypesSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Response;

use Tests\TestCase;

class NotificationSettingsTest extends TestCase
{
    use RefreshDatabase;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

//        $this->seed(NotificationTypesSeeder::class);

        $this->user         = User::factory()->create();
        $this->otherUser =  User::factory()->create();
    }

    public function test_can_add_or_update_channel()
    {
        $notificationTypeFakes = NotificationTypes::factory(3)->create();

        // should be SUCCESSFUL
        $createdNotificationSettings = NotificationSettings::factory()->create([
            'user_id'                        => $this->user->id,
            'notification_types_id'      => $notificationTypeFakes->first()->id,
            'channel'                        => ['mail']
        ]);

        $this->assertDatabaseHas('notification_settings', ['notification_types_id' => $notificationTypeFakes->first()->id, 'user_id' => $this->user->id]);
        $createdNotificationSettings->delete();

        // should be FAILED because the validation
        $requestWrong = [
            [
                'channel'                        => ['mail']
            ],
            [
                'notification_types_id'       => null,
            ]
        ];

        $response = $this
            ->actingAs($this->user, 'sanctum')
            ->postJson(route('notification-settings.store'), $requestWrong);
        $response->assertStatus(Response::HTTP_UNPROCESSABLE_ENTITY);

        //send correct / validation
        $request = [
            [
                'notification_types_id'       => $notificationTypeFakes->first()->id,
                'channel'                        => ['mail', 'broadcast']
            ],
            [
                'notification_types_id'       => $notificationTypeFakes->last()->id,
                'channel'                        => ['broadcast']
            ]
        ];

        $response = $this
            ->actingAs($this->user, 'sanctum')
            ->postJson(route('notification-settings.store'), $request);

        $response->assertStatus(Response::HTTP_OK);
    }
}
